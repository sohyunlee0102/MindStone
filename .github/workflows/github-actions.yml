name: Mindstone CI/CD (using github actions & docker)

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: self-hosted  # Windows 기반 Runner 사용
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' || github.event_name == 'push' && github.ref == 'refs/heads/develop' && github.event.head_commit.message != 'Merge pull request'

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "temurin"

      # Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            C:\Users\runneradmin\.gradle\caches
            C:\Users\runneradmin\.gradle\wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # application.yml 생성 (Windows PowerShell 명령어 사용)
      - name: make application.yml
        shell: cmd
        run: |
          mkdir src\main\resources 2>nul || echo Directory exists
          echo | set /p=">${{ secrets.YML }}" > src\main\resources\application.yml






      # Gradle 빌드 (Windows 환경)
      - name: Build with Gradle
        shell: cmd
        run: |
          gradlew.bat clean build -x test

      # Docker 로그인 및 빌드/푸시 (Windows용 변경)
      - name: Docker build and push Docker image
        shell: pwsh
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/mindstone .
          docker push ${{ secrets.DOCKER_USERNAME }}/mindstone

      # Windows 환경에서 SSH 접속 후 Docker 실행 (PowerShell 기반 명령어 변경)
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          envs: GITHUB_SHA
          script: |
            # 실행 중인 컨테이너 정리 (Windows에서는 `docker ps` 명령어 그대로 사용 가능)
            $RUNNING_CONTAINER = docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/mindstone"
            if ($RUNNING_CONTAINER -ne "") {
              Write-Host "Stopping running container..."
              docker stop $RUNNING_CONTAINER
              docker rm $RUNNING_CONTAINER
            }

            # 8080 포트 점유 프로세스 종료 (Windows용 변경)
            $PID = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue | Select-Object -ExpandProperty OwningProcess
            if ($PID -ne $null) {
              Write-Host "Killing process on port 8080..."
              Stop-Process -Id $PID -Force
            }

            # 최신 이미지 pull 후 실행
            docker pull ${{ secrets.DOCKER_USERNAME }}/mindstone
            docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/mindstone
            docker image prune -f
